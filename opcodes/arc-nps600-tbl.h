/* Bit Manipulation Instructions.  */

/* jobinc b,[cjid:c] */
{ "jobinc", 0x382f0026, 0xf8ff003f, ARC_OPCODE_ARC700, PMU, NPS600, { RB, BRAKET, NPS_CJID, COLON, RC, BRAKETdup }, { 0 }},

/* jobdec b,[cjid:c]*/
{ "jobdec", 0x382f0027, 0xf8ff003f, ARC_OPCODE_ARC700, PMU, NPS600, { RB, BRAKET, NPS_CJID, COLON, RC, BRAKETdup }, { 0 }},

/* immnt 0,[b],mnt_code */
{ "immnt", 0x57c007c500000028 , 0xffe007ff0fffffff, ARC_OPCODE_ARC700, DMA, NPS600, { ZA,  BRAKET, NPS_RBdouble_64, BRAKETdup, NPS_MNT_CODE}, { 0 }},

/* immnt 0,[src1], src2 */
{ "immnt", 0x57c007c500000020 , 0xffe007ff0fffffff, ARC_OPCODE_ARC700, DMA, NPS600, { ZA,  BRAKET, NPS_RB_64, BRAKETdup, NPS_RC_64}, { 0 }},

/* immnt 0,[xa: src1], mnt_code */
{ "immnt", 0x57c007c500000029 , 0xffe007ff0fffffff, ARC_OPCODE_ARC700, DMA, NPS600, { ZA,  BRAKET, NPS_XA , COLON, NPS_RBdouble_64, BRAKETdup, NPS_MNT_CODE}, { 0 }},

/* immnt 0,[xa: src1], src2 */
{ "immnt", 0x57c007c500000021 , 0xffe007ff0fffffff, ARC_OPCODE_ARC700, DMA, NPS600, { ZA,  BRAKET, NPS_XA , COLON, NPS_RB_64, BRAKETdup, NPS_RC_64}, { 0 }},

/* immnt 0,[sd: src1, entry_size, offset], mnt_code */
{ "immnt", 0x57c007c50000003b , 0xffe007ff00fe00ff, ARC_OPCODE_ARC700, DMA, NPS600, { ZA,  BRAKET, NPS_SD, COLON, NPS_RBdouble_64, NPS_MMNT_ENTRY_SIZE, NPS_MMNT_OFFSET, BRAKETdup, NPS_MNT_CODE}, { 0 }},

/* immnt 0,[sd: src1, entry_size, offset], src2 */
{ "immnt", 0x57c007c500000033 , 0xffe007ff00fe00ff, ARC_OPCODE_ARC700, DMA, NPS600, { ZA,  BRAKET, NPS_SD, COLON, NPS_RB_64, NPS_MMNT_ENTRY_SIZE, NPS_MMNT_OFFSET, BRAKETdup, NPS_RC_64}, { 0 }},

/* immnt 0,[sd: src1, src2, src2], mnt_code */
{ "immnt", 0x57c007c50000002b , 0xffe007ff0fffffff, ARC_OPCODE_ARC700, DMA, NPS600, { ZA,  BRAKET, NPS_SD , COLON, NPS_RB_64, NPS_RC_64, NPS_RC_64, BRAKETdup, NPS_MNT_CODE}, { 0 }},

/* immnt 0,[sd: src1, src2, src2], src2 */
{ "immnt", 0x57c007c500000023 , 0xffe007ff0fffffff, ARC_OPCODE_ARC700, DMA, NPS600, { ZA,  BRAKET, NPS_SD , COLON, NPS_RB_64, NPS_RC_64, NPS_RC_64, BRAKETdup, NPS_RC_64}, { 0 }},

/* ldjob.fb a,b,c,max_size,hof_mode*/
{ "ldjob", 0x48008018, 0xf80f801f, ARC_OPCODE_ARC700, PMU, NPS600, { NPS_R_DST_3B, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_MAX_SIZE, NPS_HOF_MODE }, { C_NPS_FB }},

/* ldjob.fb a,b,c */
{ "ldjob", 0x48000018, 0xf80fffff, ARC_OPCODE_ARC700, PMU, NPS600, { NPS_R_DST_3B, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B }, { C_NPS_FB }},

/* transjob a,b,c ,tm_bypass_mode, trans_info_in_jd, pmu_side,bypass_ordering*/
{ "transjob", 0x48008019, 0xf80f801f, ARC_OPCODE_ARC700, PMU, NPS600, { NPS_R_DST_3B, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_IMM_BIT_5, NPS_TRANS_INFO_IN_JD, NPS_PMU_SIDE, NPS_IMM_BIT_8 }, { 0 }},

/* transjob a,b,c */
{ "transjob", 0x48000019, 0xf80fffff, ARC_OPCODE_ARC700, PMU, NPS600, { NPS_R_DST_3B, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B }, { 0 }},

/* bfm.nl a,b,c, mem_type,opt_hof,buf_type*/
{ "bfm", 0x4800801A, 0xf80f801f, ARC_OPCODE_ARC700, PMU, NPS600, { NPS_R_DST_3B, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_IMM_BIT_5, NPS_IMM_BIT_8, NPS_BUFF_TYPE }, { C_NPS_ALWAYS_NL }},

/* bfm.nl a,b,c */
{ "bfm", 0x4800001A, 0xf80fffff, ARC_OPCODE_ARC700, PMU, NPS600, { NPS_R_DST_3B, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B }, { C_NPS_ALWAYS_NL }},

/* csub 0, [cm:b], [cm:b], c*/
{ "csub", 0x3826003e, 0xf8ff003f, ARC_OPCODE_ARC700, BITOP, NPS600, { ZA, BRAKET, NPS_CM, COLON, RB, BRAKETdup, BRAKET, NPS_CM, COLON, RB, BRAKETdup, RC }, { 0 }},

/* csub a, [cm:b], [cm:b], c */
{ "csub", 0x38260000, 0xf8ff0000, ARC_OPCODE_ARC700, BITOP, NPS600, { RA, BRAKET, NPS_CM, COLON, RB, BRAKETdup, BRAKET, NPS_CM, COLON, RB, BRAKETdup, RC }, { 0 }},

/* csub 0, [cm:b], [cm:b], request_data_size,csub_num,size, result_data_size */
{ "csub", 0x38260fbe00000000, 0xf8ff8fff00000000, ARC_OPCODE_ARC700, MISC, NPS600, { ZA, BRAKET, NPS_CM, COLON, NPS_RB_SPLIT_64, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_RB_SPLIT_64, BRAKETdup, NPS_CSUB_REQ_DATA_SIZE, NPS_CSUB_NUM, NPS_CSUB_SIDE, NPS_CSUB_RES_DATA_SIZE }, { 0 }},

/* csub a, [cm:b], [cm:b], request_data_size,csub_num,size, result_data_size */
{ "csub", 0x38260f8000000000, 0xf8ff8fc000000000, ARC_OPCODE_ARC700, MISC, NPS600, { NPS_RA_0_6_64, BRAKET, NPS_CM, COLON, NPS_RB_SPLIT_64, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_RB_SPLIT_64, BRAKETdup, NPS_CSUB_REQ_DATA_SIZE, NPS_CSUB_NUM, NPS_CSUB_SIDE, NPS_CSUB_RES_DATA_SIZE }, { 0 }},

/* bbitf0<.d> b,c,s11 00001bbbsssssss1SBBBCCCCCCN00110 */
{ "bbitf0", 0x08010006, 0xf801001f, ARC_OPCODE_ARC700 , BRANCH, COND, { RB, RC, SIMM11_A16_8 }, { C_D }},

/* bbitf0<.d> b,u6,s11 00001bbbsssssss1SBBBuuuuuuN10110 */
{ "bbitf0", 0x08010016, 0xf801001f, ARC_OPCODE_ARC700, BRANCH, COND, { RB, UIMM6_8, SIMM11_A16_8 }, { C_D }},

/* bbitf0 b,limm,s11 00001bbbsssssss1SBBB111110000110 */
{ "bbitf0", 0x08010F86, 0xf8010fff, ARC_OPCODE_ARC700, BRANCH, COND, { RB, LIMM, SIMM11_A16_8 }, { 0 }},

/* bbitf0 limm,c,s11 00001110sssssss1S111CCCCCC000110 */
{ "bbitf0", 0x0e017006, 0xff01703f, ARC_OPCODE_ARC700, BRANCH, COND, { LIMM, RC, SIMM11_A16_8 }, { 0 }},

/* bbitf0 limm,u6,s11 00001110sssssss1S111uuuuuu010110 */
{ "bbitf0", 0x0e017016, 0xff01703f, ARC_OPCODE_ARC700, BRANCH, COND, { LIMM, UIMM6_8, SIMM11_A16_8 }, { 0 }},

/* bbitf1<.d> b,c,s11 00001bbbsssssss1SBBBCCCCCCN00111 */
{ "bbitf1", 0x08010007, 0xf801001f, ARC_OPCODE_ARC700 , BRANCH, COND, { RB, RC, SIMM11_A16_8 }, { C_D }},

/* bbitf1<.d> b,u6,s11 00001bbbsssssss1SBBBuuuuuuN10111 */
{ "bbitf1", 0x08010017, 0xf801001f, ARC_OPCODE_ARC700, BRANCH, COND, { RB, UIMM6_8, SIMM11_A16_8 }, { C_D }},

/* bbitf1 b,limm,s11 00001bbbsssssss1SBBB111110000111 */
{ "bbitf1", 0x08010F87, 0xf8010fff, ARC_OPCODE_ARC700, BRANCH, COND, { RB, LIMM, SIMM11_A16_8 }, { 0 }},

/* bbitf1 limm,c,s11 00001110sssssss1S111CCCCCC000111 */
{ "bbitf1", 0x0e017007, 0xff01703f, ARC_OPCODE_ARC700, BRANCH, COND, { LIMM, RC, SIMM11_A16_8 }, { 0 }},

/* bbitf1 limm,u6,s11 00001110sssssss1S111uuuuuu010111 */
{ "bbitf1", 0x0e017017, 0xff01703f, ARC_OPCODE_ARC700, BRANCH, COND, { LIMM, UIMM6_8, SIMM11_A16_8 }, { 0 }},

/* Aligned Copy 16/32 Byte Instructions */

/* cp16<.na> dst, [cm:src2], [xa:src1] */
{ "cp16", 0x48074022, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XA, COLON, NPS_DPI_SRC1_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> dst, [cm:src2], [xa:src1] */
{ "cp32", 0x48074122, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XA, COLON, NPS_DPI_SRC1_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> [cm:src2], [xa:src1] */
{ "cp16", 0x4807c022, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XA, COLON, NPS_DPI_SRC1_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> [cm:src2], [xa:src1] */
{ "cp32", 0x4807c122, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XA, COLON, NPS_DPI_SRC1_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> dst, [cm:src2], [xa:src1,src2] */
{ "cp16", 0x48070022, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XA, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> dst, [cm:src2], [xa:src1,src2] */
{ "cp32", 0x48070122, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XA, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> [cm:src2], [xa:src1,src2] */
{ "cp16", 0x48078022, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XA, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> [cm:src2], [xa:src1,src2] */
{ "cp32", 0x48078122, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XA, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> [cm:src2],[sd:src1,entry,off] */
{ "cp16", 0x4807c062, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> [cm:src2],[sd:src1,entry,off] */
{ "cp32", 0x4807c162, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> dst, [cm:src2],[sd:src1,entry,off] */
{ "cp16", 0x48074062, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> dst, [cm:src2],[sd:src1,entry,off] */
{ "cp32", 0x48074162, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> [cm:src2],[sd:src1,entry,off, src2] */
{ "cp16", 0x48078062, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> [cm:src2],[sd:src1,entry,off, src2] */
{ "cp32", 0x48078162, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> dst, [cm:src2],[sd:src1,entry,off,src2] */
{ "cp16", 0x48070062, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> dst, [cm:src2],[sd:src1,entry,off,src2] */
{ "cp32", 0x48070162, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> [cm:src2],[sd:src1,src2, src2] */
{ "cp16", 0x4807c060, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> [cm:src2],[sd:src1,src2, src2] */
{ "cp32", 0x4807c160, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> dst, [cm:src2],[sd:src1,src2,src2] */
{ "cp16", 0x48074060, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> dst, [cm:src2],[sd:src1,src2,src2] */
{ "cp32", 0x48074160, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> [cm:src2],[sd:src1,src2,src2,src2] */
{ "cp16", 0x48078060, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> [cm:src2],[sd:src1,src2,src2,src2] */
{ "cp32", 0x48078160, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> dst, [cm:src2],[sd:src1,src2,src2,src2] */
{ "cp16", 0x48070060, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> dst, [cm:src2],[sd:src1,src2,src2,src2] */
{ "cp32", 0x48070160, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_SD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> [cm:src2],[xd:src1,entry,off] */
{ "cp16", 0x4807c082, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> [cm:src2],[xd:src1,entry,off] */
{ "cp32", 0x4807c182, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> dst, [cm:src2],[xd:src1,entry,off] */
{ "cp16", 0x48074082, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> dst, [cm:src2],[xd:src1,entry,off] */
{ "cp32", 0x48074182, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> [cm:src2],[xd:src1,entry,off, src2] */
{ "cp16", 0x48078082, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> [cm:src2],[xd:src1,entry,off, src2] */
{ "cp32", 0x48078182, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> dst, [cm:src2],[xd:src1,entry,off,src2] */
{ "cp16", 0x48070082, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> dst, [cm:src2],[xd:src1,entry,off,src2] */
{ "cp32", 0x48070182, 0xf80fc1e3, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_DMA_IMM_ENTRY, NPS_DMA_IMM_OFFSET, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> [cm:src2],[xd:src1,src2, src2] */
{ "cp16", 0x4807c080, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> [cm:src2],[xd:src1,src2, src2] */
{ "cp32", 0x4807c180, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> dst, [cm:src2],[xd:src1,src2,src2] */
{ "cp16", 0x48074080, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> dst, [cm:src2],[xd:src1,src2,src2] */
{ "cp32", 0x48074180, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> [cm:src2],[xd:src1,src2,src2,src2] */
{ "cp16", 0x48078080, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> [cm:src2],[xd:src1,src2,src2,src2] */
{ "cp32", 0x48078180, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp16<.na> dst, [cm:src2],[xd:src1,src2,src2,src2] */
{ "cp16", 0x48070080, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* cp32<.na> dst, [cm:src2],[xd:src1,src2,src2,src2] */
{ "cp32", 0x48070180, 0xf80ffdef, ARC_OPCODE_ARC700, DMA, NPS600, { NPS_R_DST_3B, BRAKET, NPS_CM, COLON, NPS_R_SRC2_3B, BRAKETdup, BRAKET, NPS_XD, COLON, NPS_DPI_SRC1_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, NPS_R_SRC2_3B, BRAKETdup }, { C_NPS_NA, C_NPS_CP_NL }},

/* dcmac  0,[cm:b],[cm:b],size */
{ "dcmac", 0x57c007c020000000, 0xffe007ffffc0ffff, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { ZA, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_RB_64, BRAKETdup, NPS_SIZE_1_40 }, { 0 }},

/* dcmac  0,[cm:b],[cm:A],size */
{ "dcmac", 0x57c007c022000000, 0xffe007ffffc00000, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { ZA, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_CP_CMEM_OFFSET, BRAKETdup, NPS_SIZE_1_40 }, { 0 }},

/* dcmac  0,[cm:A],[cm:b],size */
{ "dcmac", 0x57c007c023000000, 0xffe007ffffc00000, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { ZA, BRAKET, NPS_CM, COLON, NPS_CP_CMEM_OFFSET, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, NPS_SIZE_1_40 }, { 0 }},

/* dcmac  a,[cm:b],[cm:b],size */
{ "dcmac", 0x500007c020000000, 0xf80007ffffc0ffff, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { NPS_RA_64, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_RB_64, BRAKETdup, NPS_SIZE_1_40 }, { 0 }},

/* dcmac  a,[cm:b],[cm:A],size */
{ "dcmac", 0x500007c022000000, 0xf80007ffffc00000, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { NPS_RA_64, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_CP_CMEM_OFFSET, BRAKETdup, NPS_SIZE_1_40 }, { 0 }},

/* dcmac  a,[cm:A],[cm:b],size */
{ "dcmac", 0x500007c023000000, 0xf80007ffffc00000, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { NPS_RA_64, BRAKET, NPS_CM, COLON, NPS_CP_CMEM_OFFSET, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, NPS_SIZE_1_40 }, { 0 }},

/* dcmpls  0,[cm:b],[cm:b],size */
{ "dcmpls", 0x57c007c028000000, 0xffe007ffffc0ffff, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { ZA, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_RB_64, BRAKETdup, NPS_SIZE_1_24 }, { 0 }},

/* dcmpls  0,[cm:b],[cm:A],size */
{ "dcmpls", 0x57c007c02a000000, 0xffe007ffffc00000, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { ZA, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_CP_CMEM_OFFSET, BRAKETdup, NPS_SIZE_1_24 }, { 0 }},

/* dcmpls  0,[cm:A],[cm:b],size */
{ "dcmpls", 0x57c007c02b000000, 0xffe007ffffc00000, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { ZA, BRAKET, NPS_CM, COLON, NPS_CP_CMEM_OFFSET, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, NPS_SIZE_1_24 }, { 0 }},

/* dcmpls  a,[cm:b],[cm:b],size */
{ "dcmpls", 0x500007c028000000, 0xf80007ffffc0ffff, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { NPS_RA_64, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_RB_64, BRAKETdup, NPS_SIZE_1_24 }, { 0 }},

/* dcmpls  a,[cm:b],[cm:A],size */
{ "dcmpls", 0x500007c02a000000, 0xf80007ffffc00000, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { NPS_RA_64, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_CP_CMEM_OFFSET, BRAKETdup, NPS_SIZE_1_24 }, { 0 }},

/* dcmpls  a,[cm:A],[cm:b],size */
{ "dcmpls", 0x500007c02b000000, 0xf80007ffffc00000, ARC_OPCODE_ARC700, PROTOCOL_DECODE, NPS600, { NPS_RA_64, BRAKET, NPS_CM, COLON, NPS_CP_CMEM_OFFSET, BRAKETdup, BRAKET, NPS_CM, COLON, NPS_RBdouble_64, BRAKETdup, NPS_SIZE_1_24 }, { 0 }},

